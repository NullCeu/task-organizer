#!/bin/bash

# Script de build autom√°tico para TaskCLI
# Autor: TaskCLI Project
# Vers√£o: 1.0

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Fun√ß√µes utilit√°rias
print_header() {
    echo -e "${BLUE}${BOLD}"
    echo "=================================="
    echo "  üöÄ TaskCLI Build Script v1.0"
    echo "=================================="
    echo -e "${NC}"
}

print_step() {
    echo -e "${YELLOW}${BOLD}[STEP]${NC} $1"
}

print_success() {
    echo -e "${GREEN}${BOLD}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}${BOLD}[ERROR]${NC} $1"
}

check_dependencies() {
    print_step "Verificando depend√™ncias..."
    
    # Verificar g++
    if ! command -v g++ &> /dev/null; then
        print_error "g++ n√£o encontrado! Instale um compilador C++."
        echo "Ubuntu/Debian: sudo apt install build-essential"
        echo "CentOS/RHEL: sudo yum install gcc-c++"
        echo "macOS: xcode-select --install"
        exit 1
    fi
    
    # Verificar vers√£o do g++
    GCC_VERSION=$(g++ -dumpversion | cut -d. -f1)
    if [ "$GCC_VERSION" -lt 7 ]; then
        print_error "g++ vers√£o muito antiga! Requer vers√£o 7+ para C++17."
        exit 1
    fi
    
    # Verificar make (opcional)
    if command -v make &> /dev/null; then
        HAS_MAKE=true
        print_success "g++ $(g++ -dumpversion) e make encontrados!"
    else
        HAS_MAKE=false
        print_success "g++ $(g++ -dumpversion) encontrado! (make n√£o dispon√≠vel)"
    fi
}

build_project() {
    print_step "Compilando TaskCLI..."
    
    if [ "$HAS_MAKE" = true ] && [ -f "Makefile" ]; then
        make clean 2>/dev/null || true
        make
    else
        # Build manual sem Makefile
        g++ -std=c++17 -Wall -Wextra -O2 -o taskcli task_manager.cpp
    fi
    
    if [ -f "taskcli" ]; then
        print_success "Compila√ß√£o conclu√≠da com sucesso!"
        chmod +x taskcli
    else
        print_error "Falha na compila√ß√£o!"
        exit 1
    fi
}

run_tests() {
    print_step "Executando testes b√°sicos..."
    
    # Limpar dados de teste anteriores
    rm -f tasks.txt test_export.csv 2>/dev/null || true
    
    # Testes b√°sicos
    ./taskcli add "Teste de funcionalidade b√°sica" -p alta
    ./taskcli add "Segunda tarefa de teste" -p baixa -d 2025-08-25
    ./taskcli add "Terceira tarefa" -p media
    
    # Verificar se as tarefas foram criadas
    if [ ! -f "tasks.txt" ]; then
        print_error "Arquivo de tarefas n√£o foi criado!"
        exit 1
    fi
    
    # Marcar uma como conclu√≠da
    ./taskcli done 1
    
    # Exportar para CSV
    ./taskcli export test_export.csv
    
    if [ ! -f "test_export.csv" ]; then
        print_error "Exporta√ß√£o CSV falhou!"
        exit 1
    fi
    
    print_success "Todos os testes passaram!"
    
    # Mostrar resultado final
    echo -e "\n${BOLD}Resultado dos testes:${NC}"
    ./taskcli list
    
    # Limpeza dos testes
    rm -f tasks.txt test_export.csv 2>/dev/null || true
}

show_usage() {
    echo -e "${BOLD}Uso:${NC} $0 [op√ß√µes]"
    echo ""
    echo "Op√ß√µes:"
    echo "  -h, --help       Mostrar esta ajuda"
    echo "  -t, --test       Executar testes ap√≥s build"
    echo "  -i, --install    Instalar no sistema ap√≥s build"
    echo "  -c, --clean      Limpar antes de compilar"
    echo "  -r, --release    Build de release otimizado"
    echo "  -d, --debug      Build com s√≠mbolos de debug"
    echo ""
    echo "Exemplos:"
    echo "  $0                 # Build padr√£o"
    echo "  $0 --test          # Build + testes"
    echo "  $0 --release       # Build otimizado"
    echo "  $0 --install       # Build + instalar"
}

# An√°lise de argumentos
BUILD_TYPE="default"
RUN_TESTS=false
INSTALL_AFTER=false
CLEAN_FIRST=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -t|--test)
            RUN_TESTS=true
            shift
            ;;
        -i|--install)
            INSTALL_AFTER=true
            shift
            ;;
        -c|--clean)
            CLEAN_FIRST=true
            shift
            ;;
        -r|--release)
            BUILD_TYPE="release"
            shift
            ;;
        -d|--debug)
            BUILD_TYPE="debug"
            shift
            ;;
        *)
            print_error "Op√ß√£o desconhecida: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Script principal
main() {
    print_header
    
    # Verificar se estamos no diret√≥rio correto
    if [ ! -f "task_manager.cpp" ]; then
        print_error "task_manager.cpp n√£o encontrado! Execute no diret√≥rio do projeto."
        exit 1
    fi
    
    check_dependencies
    
    # Limpeza se solicitada
    if [ "$CLEAN_FIRST" = true ]; then
        print_step "Limpando arquivos anteriores..."
        rm -f taskcli *.o tasks.txt *.csv 2>/dev/null || true
        print_success "Limpeza conclu√≠da!"
    fi
    
    # Build baseado no tipo
    case $BUILD_TYPE in
        "release")
            print_step "Compilando vers√£o RELEASE..."
            if [ "$HAS_MAKE" = true ]; then
                make release
            else
                g++ -std=c++17 -Wall -Wextra -O3 -DNDEBUG -s -o taskcli task_manager.cpp
            fi
            ;;
        "debug")
            print_step "Compilando vers√£o DEBUG..."
            if [ "$HAS_MAKE" = true ]; then
                make debug
            else
                g++ -std=c++17 -Wall -Wextra -g -DDEBUG -o taskcli task_manager.cpp
            fi
            ;;
        *)
            build_project
            ;;
    esac
    
    # Executar testes se solicitado
    if [ "$RUN_TESTS" = true ]; then
        run_tests
    fi
    
    # Instalar se solicitado
    if [ "$INSTALL_AFTER" = true ]; then
        print_step "Instalando no sistema..."
        if [ "$HAS_MAKE" = true ]; then
            make install
        else
            sudo cp taskcli /usr/local/bin/
            sudo chmod +x /usr/local/bin/taskcli
            print_success "TaskCLI instalado em /usr/local/bin/"
        fi
    fi
    
    # Informa√ß√µes finais
    echo -e "\n${GREEN}${BOLD}üéâ Build conclu√≠do com sucesso!${NC}"
    echo -e "Execute: ${BLUE}${BOLD}./taskcli help${NC} para come√ßar"
    
    if [ "$INSTALL_AFTER" = true ]; then
        echo -e "Ou use: ${BLUE}${BOLD}taskcli help${NC} de qualquer lugar"
    fi
    
    # Mostrar informa√ß√µes do bin√°rio
    if [ -f "taskcli" ]; then
        BINARY_SIZE=$(du -h taskcli | cut -f1)
        echo -e "\nInforma√ß√µes do bin√°rio:"
        echo -e "  Tamanho: ${BINARY_SIZE}"
        echo -e "  Tipo: $BUILD_TYPE"
        echo -e "  Localiza√ß√£o: $(pwd)/taskcli"
    fi
}

# Executar fun√ß√£o principal
main "$@"
